[{"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\assets\\js\\rem.js":"2","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\App.js":"3","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\pages\\index.jsx":"4","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\pages\\list.jsx":"5","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\pages\\play.jsx":"6","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\views\\hotRank.jsx":"7","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\views\\recommended.jsx":"8","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\views\\search.jsx":"9","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\util\\axios\\index.js":"10","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\util\\axios\\axios.js":"11","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\components\\header.jsx":"12"},{"size":498,"mtime":1611909582333,"results":"13","hashOfConfig":"14"},{"size":461,"mtime":1611899554940,"results":"15","hashOfConfig":"14"},{"size":591,"mtime":1611909333341,"results":"16","hashOfConfig":"14"},{"size":1415,"mtime":1612091362272,"results":"17","hashOfConfig":"14"},{"size":890,"mtime":1611906150384,"results":"18","hashOfConfig":"14"},{"size":2868,"mtime":1612083075295,"results":"19","hashOfConfig":"14"},{"size":3919,"mtime":1612079222059,"results":"20","hashOfConfig":"14"},{"size":5510,"mtime":1611986593424,"results":"21","hashOfConfig":"14"},{"size":8504,"mtime":1612081779120,"results":"22","hashOfConfig":"14"},{"size":1039,"mtime":1612019251418,"results":"23","hashOfConfig":"14"},{"size":377,"mtime":1611935810746,"results":"24","hashOfConfig":"14"},{"size":941,"mtime":1612091091013,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"193cro3",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\index.js",[],["54","55"],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\assets\\js\\rem.js",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\App.js",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\pages\\index.jsx",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\pages\\list.jsx",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\pages\\play.jsx",["56"],"import React from \"react\";\r\n//引入play.css文件\r\nimport '../assets/css/play.css'\r\n//引入静态图片\r\n// import playtop from \"../assets/images/playtop.png\";\r\n//引入封装好的接口\r\nimport { getSongUrl, getLyric } from '../util/axios'\r\n\r\n\r\n// 引入导航链接\r\n// import { NavLink, Link } from \"react-router-dom\";\r\n// import ReactDOM from 'react-dom';\r\n\r\n\r\nclass Play extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      songUrl: \"\",\r\n      lyric: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    console.log(this.props, \"属性\");\r\n    getSongUrl({ id: this.props.location.state.id })\r\n      .then(res => {\r\n        if (res.code === 200) {\r\n          console.log(res, \"内容\");\r\n          this.setState({\r\n            songUrl: res.data[0].url\r\n          })\r\n        }\r\n      })\r\n\r\n    getLyric({ id: this.props.location.state.id })\r\n      .then(res => {\r\n        if (res.code === 200) {\r\n          console.log(res, \"歌词\");\r\n          this.setState({\r\n            lyric: res.lrc.lyric\r\n          })\r\n        }\r\n      })\r\n  }\r\n  // 封装一个 点击暂停的方法\r\n  clickIcon(e) {\r\n    console.log(e);\r\n    console.log(e.target.nextSibling);\r\n    // console.log(e.target.id);\r\n    if (e.target.id !== \"\") {\r\n      e.target.id = \"\";\r\n      e.target.nextSibling.pause()\r\n\r\n    } else {\r\n      e.target.id = \"display\";\r\n      e.target.nextSibling.play()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { query, songUrl, lyric } = this.state;\r\n    return (\r\n      <div >\r\n        <div className='content'>\r\n          {/* logo */}\r\n          <div className='m-logo '>\r\n            {/* <img    src={playtop}></img> */}\r\n          </div>\r\n\r\n          {/* <h1>接收到的query参数是---{query.id}</h1> */}\r\n          {/* 播放器 */}\r\n          <div className='m-song-disc'>\r\n            <div className='m-song-turn'>\r\n              <div className='m-song-rollwrap'>\r\n                <div className='m-song-img a-circling z-pause'>\r\n                  <img className='u-img' alt=\"song-img\" src={this.props.location.state.picUrl} />\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* 播放 */}\r\n            {/* <span className='m-song-plybtn'src={songUrl}> */}\r\n            {/* <audio   src={songUrl} controls autoPlay></audio> */}\r\n            {/* <audio   src={songUrl}  autoPlay></audio> */}\r\n\r\n            <div onClick={this.clickIcon.bind(this)}>\r\n              <i className=\"iconfont icon-bofang bofang\" ></i>\r\n              <audio src={songUrl}></audio>\r\n            </div>\r\n\r\n\r\n            {/* </span> */}\r\n\r\n          </div>\r\n\r\n          {/* 歌词 */}\r\n          <div className='songer'>\r\n            <ul className=\"songer_ul\">\r\n              <li className=\"songer_li\">{lyric}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Play;\r\n","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\views\\hotRank.jsx",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\views\\recommended.jsx",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\views\\search.jsx",["57","58","59","60"],"import React from \"react\";\r\n//引入静态资源图片\r\nimport search from '../assets/images/search.png'\r\n//引入css文件\r\nimport '../assets/css/search.css'\r\n\r\n// 引入封装好的接口\r\nimport { getSearch, getHotSearch, getSearchSuggest } from \"../util/axios/index\"\r\n\r\n// 引入导航链接\r\nimport { Link } from \"react-router-dom\";\r\nclass Search extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            val: \"\",\r\n            hotList: [],\r\n            lenovoList: [],\r\n            searchList: [],\r\n            // 联想\r\n            albums: [],\r\n            artists: [],\r\n\r\n            falg: false,\r\n        };\r\n        this.inp = React.createRef()\r\n    }\r\n    //封装一个键盘抬起事件\r\n    keyUp(e) {\r\n        this.setState({\r\n            val: e.target.value,\r\n        });\r\n        // 判断 input 的值是否为空\r\n        if (e.target.value !== \"\") {\r\n            /* 调取联想 */\r\n            // this.getSearchSuggestList(e.target.value)\r\n            this.falg = false;\r\n\r\n        }\r\n\r\n        if (e.keyCode == 13) {\r\n            console.log(e.target.value, \"e.target.value\");\r\n            //调取搜索接口\r\n            this.getSearchList(e.target.value)\r\n            this.falg = true\r\n            console.log(this.falg);\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getHotSearchList()\r\n    }\r\n    // shouldComponentUpdate(newProps,newState){\r\n    //     // 参数分别为改变之前的数据状态对象\r\n    //     if(newState.val!==\"\"){\r\n    //         console.log(newState.val,\"前\");\r\n    //         return true\r\n    //     }else{\r\n    //         return false\r\n    //     }\r\n    // }\r\n    //封装一个 搜索方法\r\n    getSearchList(keywords) {\r\n        getSearch({ keywords })\r\n            .then(res => {\r\n                if (res.code === 200) {\r\n                    console.log(res, \"搜索方法\");\r\n                    this.setState({\r\n                        searchList: res.result.songs.filter((item, i) => i < 10)\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err, \"请求失败\");\r\n            })\r\n    }\r\n\r\n\r\n    //封装一个 搜索建议\r\n    getSearchSuggestList(keywords) {\r\n        getSearchSuggest({ keywords })\r\n            .then(res => {\r\n                if (res.code === 200) {\r\n                    console.log(res, \"搜索建议\");\r\n                    this.setState({\r\n                        // lenovoList: res.result.songs.filter((item, i) => i < 10)\r\n                        albums: res.result.albums,\r\n                        artists: res.result.artists,\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    //封装一个 热搜歌曲 的方法\r\n    getHotSearchList() {\r\n        getHotSearch()\r\n            .then(res => {\r\n                if (res.code === 200) {\r\n                    console.log(res, \"热搜歌曲\");\r\n                    this.setState({\r\n                        hotList: res.data.filter((item, i) => i < 10)\r\n                    })\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    //清空事件\r\n    del() {\r\n        this.setState({\r\n            val: ''\r\n        })\r\n        this.inp.current.value = ''\r\n    }\r\n\r\n    render() {\r\n        const { val, hotList, falg, lenovoList, searchList, artists, albums } = this.state;\r\n        return (\r\n            <div>\r\n                <div className='box'>\r\n                    <img src={search} alt=\"\" />\r\n                    <input type=\"text\" placeholder='搜索歌曲、歌手、专辑' className='input' ref={this.inp} onKeyUp={this.keyUp.bind(this)} />\r\n                    {val ? <span className='reset' onClick={this.del.bind(this)}>×</span> : \"\"}\r\n                </div>\r\n                {/* 热门搜索 */}\r\n                {val ? \"\" : <div className='con'>\r\n                    <p>热门搜索</p>\r\n                    <ul className='list'>\r\n                        {\r\n                            hotList.map((item) => {\r\n                                return (\r\n                                    <li className='song' key={item.searchWord}>\r\n                                        <div className=\"cont\">\r\n                                            {item.searchWord}\r\n                                        </div>\r\n                                    </li>\r\n                                );\r\n                            })\r\n                        }\r\n\r\n                    </ul>\r\n                </div>}\r\n                {/* 搜索歌曲 */}\r\n                {falg ? \"\" : <div>\r\n                    <ul className=\"searchList\" >\r\n                        {/* {\r\n                            searchList.map((item) => {\r\n                                return (\r\n                                    <li key={item.id}>\r\n                                        <div className=\"name\">{item.name}</div>\r\n                                    </li>\r\n\r\n\r\n                                )\r\n                            })\r\n                        } */}\r\n\r\n                        {searchList.map((item, idx) => {\r\n                            return (\r\n                                <Link to={\r\n                                    {\r\n                                        pathname: '/play',\r\n                                        state: {\r\n                                            id: item.id\r\n                                        }\r\n                                    }\r\n                                } key={item.id} className=\"hotcont\">\r\n                                    <li className=\"song\">\r\n\r\n\r\n                                        <div className=\"song_list\">\r\n                                            <div className=\"song_na\">\r\n                                                <div className=\"song_name\">\r\n                                                    <div className=\"name\">{item.name}\r\n                                                        <span>\r\n                                                            {item.alia}\r\n                                                        </span>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"song_author\">\r\n                                                    <div className=\"author\">\r\n                                                        <div className=\"sq_icon\">\r\n                                                            <div className=\"icon\">SQ</div>\r\n                                                        </div>\r\n                                                        {item.artists[0].name} - {item.name}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"song_icon\">\r\n                                                <i className=\"iconfont icon-bofang\"></i>\r\n                                            </div>\r\n                                        </div>\r\n                                    </li></Link>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>}\r\n                {/* 联想歌曲 */}\r\n                {/* {val ? <div>\r\n                    <ul className=\"lenovoList\" >\r\n                        <li  className=\"name\">搜索{val}</li>id\r\n                        {\r\n                            artists.map((item) => {\r\n                                return (\r\n                                    <li key={item.id}>\r\n                                        <span className=\"name\">{item.name}</span>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                         {\r\n                            albums.map((item) => {\r\n                                return (\r\n                                    <li key={item.id}>\r\n                                        <span className=\"name\">{item.name}</span>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div> : \"\"} */}\r\n\r\n                {/* 搜索歌曲列表 */}\r\n                {/* {falg===true ? <div>nihao </div> :<div className=\"search_song\"></div>} */}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Search;\r\n","C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\util\\axios\\index.js",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\util\\axios\\axios.js",[],"C:\\Users\\Lenovo\\Desktop\\袁腾腾\\第四阶段\\cloud\\src\\components\\header.jsx",["61"],"import React from 'react'\r\n//引入静态图片\r\nimport header from \"../assets/images/header.png\";\r\n/* \r\n对于普通嵌套组件，它没有路由的配置对象，如何解决\r\n我们可以调用，路由的高阶函数\r\n高阶函数：函数(组件)  通过调用函数return一个新组件\r\n*/\r\n// 引入配置路由对象的方法\r\nimport {withRouter} from 'react-router-dom'\r\nclass Home extends React.Component {\r\n      //跳转播放的方法\r\n  goPlay() {\r\n    console.log(this,\"触发跳转播放\");\r\n    //通过编程式导航进行跳转\r\n     this.props.history.push('/play')\r\n  }\r\n    render() {\r\n        return (<div className='header'>\r\n            {/* 头部标题 */}\r\n            <div >\r\n                <img onClick={this.goPlay.bind(this)} className='title' src={header}></img>\r\n                <span className='load' >下载APP</span>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Home);",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":61,"column":13,"nodeType":"68","messageId":"69","endLine":61,"endColumn":18},{"ruleId":"70","severity":1,"message":"71","line":41,"column":23,"nodeType":"72","messageId":"73","endLine":41,"endColumn":25},{"ruleId":"66","severity":1,"message":"74","line":116,"column":37,"nodeType":"68","messageId":"69","endLine":116,"endColumn":47},{"ruleId":"66","severity":1,"message":"75","line":116,"column":61,"nodeType":"68","messageId":"69","endLine":116,"endColumn":68},{"ruleId":"66","severity":1,"message":"76","line":116,"column":70,"nodeType":"68","messageId":"69","endLine":116,"endColumn":76},{"ruleId":"77","severity":1,"message":"78","line":22,"column":17,"nodeType":"79","endLine":22,"endColumn":86},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'query' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'lenovoList' is assigned a value but never used.","'artists' is assigned a value but never used.","'albums' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]